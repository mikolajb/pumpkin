#JSON invoke ex

{
invoke : [
            {
                func : FUNCTION_NAME | URL | POI
                state : bits
            },
            {
                func : FUNCTION_NAME | URL | POI
                state : bits
            }
        ]
freeports : [
                {

                }
            ]
container-id : ID
box-id : ID

}

#JSON broadcast info
{
uid : harness_uid
ring : ring_id
comms : [
            {
                type : TFTP | P2PTFTP | RABBITMQ
                host : ip | host
                port : port
                user : username
                pass : password
                aux1  :  randevouz_server | queue_name
                aux2 : extra_parameters
            },
            {
                type : TFTP | P2PTFTP | RABBITMQ
                host : ip | host
                port : port
                user : username
                pass : password
                aux1  : randevouz_server | queue_name
                aux2 : extra_parameters
            }
           ]
functions : [
                {
                    poi: function process object identifier
                    name: name
                    input_type : raw type | rdf type
                    output_type : raw_type | rdf_type
                    semantic : inline semantic | url
                },
                {
                    poi: function process object identifier
                    name: name
                    input_type : raw type | rdf type
                    output_type : raw_type | rdf_type
                    semantic : inline semantic | url
                }

peers : [  {
            uid : harness_uid,
            ring : ring_id,
            comms : [
                    {
                        type : TFTP | P2PTFTP | RABBITMQ
                        host : ip | host
                        port : port
                        user : username
                        pass : password
                        aux1  :  randevouz_server | queue_name
                        aux2 : extra_parameters
                    },
                    {
                        type : TFTP | P2PTFTP | RABBITMQ
                        host : ip | host
                        port : port
                        user : username
                        pass : password
                        aux1  : randevouz_server | queue_name
                        aux2 : extra_parameters
                    }
                    ],
            functions : [
                        {
                            poi: function process object identifier
                            name: name
                            input_type : raw type | rdf type
                            output_type : raw_type | rdf_type
                            semantic : inline semantic | url
                        },
                        {
                            poi: function process object identifier
                            name: name
                            input_type : raw type | rdf type
                            output_type : raw_type | rdf_type
                            semantic : inline semantic | url
                        }
                        ]

            }, #end_peer
            {
            uid : harness_uid,
            ring : ring_id,
            comms : [
                    {
                        type : TFTP | P2PTFTP | RABBITMQ
                        host : ip | host
                        port : port
                        user : username
                        pass : password
                        aux1  :  randevouz_server | queue_name
                        aux2 : extra_parameters
                    },
                    {
                        type : TFTP | P2PTFTP | RABBITMQ
                        host : ip | host
                        port : port
                        user : username
                        pass : password
                        aux1  : randevouz_server | queue_name
                        aux2 : extra_parameters
                    }
                    ],
            functions : [
                        {
                            poi: function process object identifier
                            name: name
                            input_type : raw type | rdf type
                            output_type : raw_type | rdf_type
                            semantic : inline semantic | url
                        },
                        {
                            poi: function process object identifier
                            name: name
                            input_type : raw type | rdf type
                            output_type : raw_type | rdf_type
                            semantic : inline semantic | url
                        }
                        ]

            }, #end_peer

}

#########################################################################


##data = json.loads('{"maps":[{"id":"blabla","iscategorical":"0"},{"id":"2blabla","iscategorical":"0"}],\
##"masks":{"id":"valore"},\
##"om_points":"value",\
##"parameters":{"id":"valore"}\
##}')
#
##data = json.loads('{"uid" : "my-uid", "udp_port" : "7780"}')
##data = json.loads('{uid : "my-uid", udp_port : "7780"}')
#
##print data["uid"]
##print data["udp_port"]
##print data["maps"][1]["id"]
##print data["masks"]["id"]
##print data["om_points"]
#
##func = Function("10.100.qaz", "add", "someinput", "someoutput")
##print "[1] :" + func.getJSON()
##fun2 = Function.fromJSON(func.getJSON())
#
##print "[2] :"+ fun2.getJSON()
#
#comm = Communication("TFTP", "127.0.0.1", "7780")
#comm2 = Communication("P2PTFTP", "192.168.1.1", "7770")
#func = Function("10.100.qaz", "add", "someinput", "someoutput")
#func2 = Function("10.111.plo", "sub", "someinput", "someoutput")
#peer = Peer("slimem-1qsad")
#peer.addComm(comm)
##peer.addComm(comm2)
##peer.addFunction(func)
##peer.addFunction(func2)
#
#peer2 =  Peer("nano-plko123")
##peer2.addComm(comm)
#peer2.addComm(comm2)
##peer2.addFunction(func)
##peer2.addFunction(func2)
#
#peer3 = Peer("pico-qaw34")
#peer3.addComm(comm)
##peer3.addComm(comm2)
##peer3.addFunction(func)
##peer3.addFunction(func2)
#
#peer2.addPeer(peer3)
#peer.addPeer(peer2)
#for pc in peer2.comms:
#    print "KOLOK: " + pc.type
#
#
#print peer.getJSON()
#d = json.loads(peer.getJSON())
#
#for p in d["peers"]:
#    print p["uid"]
#    for x in p["comms"]:
#        print x["type"]
#
##for f in d["functions"]:
##    print f["poi"]
#
##print d["comms"][1]["port"]